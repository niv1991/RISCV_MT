//////////////////////////////////////////////////////////////
//                      SIMPLE_ARBITER.sv                   //
//                        Michael Pines                     //
//////////////////////////////////////////////////////////////
//           Assume incoming requests are held until        //
//                     granted (may be longer).             //
import riscv_defines::THREAD_ADDR_WIDTH;
import riscv_defines::NUM_THREADS;

module simple_arbiter
(
	input  logic                         clk,
	input  logic                         rst,

    input  logic [NUM_THREADS-1:0]       request,
	// Pipeline granted, output thread index.
	output logic [THREAD_ADDR_WIDTH-1:0] gnt,
	output logic [THREAD_ADDR_WIDTH-1:0] nxt
); 
parameter  MASTER_THREAD  = {THREAD_ADDR_WIDTH{1'b0}};
localparam ONE_ADDR       = {{THREAD_ADDR_WIDTH-1{1'b0}},1'b1};

always@(posedge clk, negedge rst)
begin
    // Output master thread when reset
	if (rst==1'b0)  
		gnt <= MASTER_THREAD;
	else 
    begin 
        // Output
		gnt <= gnt;
		//nxt <= gnt;
		for(int i = gnt+ONE_ADDR; i < NUM_THREADS+gnt; i++) // Not requesting if stalled
		begin
			if(request[i[THREAD_ADDR_WIDTH-1:0]]) begin
				gnt <= i[THREAD_ADDR_WIDTH-1:0];
				/*for(int j = i+ONE_ADDR; j < NUM_THREADS+i[THREAD_ADDR_WIDTH-1:0]; j++)
					if(request[j[THREAD_ADDR_WIDTH-1:0]]) begin
						nxt <= j[THREAD_ADDR_WIDTH-1:0];
						break;
					end*/
				break;
			end
		end
	end
end

always_comb
begin
	nxt = gnt;
	for(int j = gnt+ONE_ADDR; j < NUM_THREADS+gnt; j++)
		if(request[j[THREAD_ADDR_WIDTH-1:0]]) begin
			nxt = j[THREAD_ADDR_WIDTH-1:0];
			break;
		end
end

endmodule